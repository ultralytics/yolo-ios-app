# Ultralytics ðŸš€ AGPL-3.0 License - https://ultralytics.com/license

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Xcode Version
        run: xcodebuild -version

      - name: Download YOLO models
        run: |
          rm -rf Tests/YOLOTests/Resources/*.mlpackage Tests/YOLOTests/Resources/__MACOSX
          mkdir -p Tests/YOLOTests/Resources
          for MODEL in yolo11n yolo11n-cls yolo11n-obb yolo11n-pose yolo11n-seg; do
            curl -L "https://github.com/ultralytics/yolo-ios-app/releases/download/v8.3.0/${MODEL}.mlpackage.zip" -o temp.zip
            unzip -o temp.zip -d Tests/YOLOTests/Resources && rm temp.zip
          done
          rm -rf Tests/YOLOTests/Resources/__MACOSX

      - name: Install dependencies
        run: xcodebuild -resolvePackageDependencies

      - name: Create test .env file
        run: |
          echo "API_URL=https://test-api.ultralytics.com
          FIREBASE_API_KEY=test-key" > .env

      - name: Build and Test
        run: |
          IOS_SIMULATOR=$(xcrun simctl list devices available | grep -E "iPhone.*" | head -1 | sed -E 's/.*\(([A-Z0-9-]+)\).*/\1/')
          DESTINATION=${IOS_SIMULATOR:+id=$IOS_SIMULATOR}
          DESTINATION=${DESTINATION:-name=iPhone 14}
          
          xcodebuild \
            -scheme YOLO \
            -sdk iphonesimulator \
            -derivedDataPath Build/ \
            -destination "platform=iOS Simulator,$DESTINATION" \
            -enableCodeCoverage YES \
            clean build test

      - name: Generate Code Coverage Report
        run: |
          # Debug output
          echo "Listing Debug-iphonesimulator contents:"
          ls -la Build/Build/Products/Debug-iphonesimulator
          
          # First try: direct approach for app bundle
          APP_PATH=$(find Build/Build/Products -name "YOLO.app" -type d | head -1)
          echo "Direct app search result: $APP_PATH"
          
          # If not found, look for any .app bundles
          if [ -z "$APP_PATH" ]; then
            APP_PATH=$(find Build/Build/Products -name "*.app" -type d | grep -v "\.xctest" | head -1)
            echo "Fallback app search result: $APP_PATH"
          fi
          
          # Look for binary directly
          BINARY_PATH=""
          if [ -n "$APP_PATH" ]; then
            # Try app bundle first
            BINARY_PATH="$APP_PATH/YOLO"
            if [ ! -f "$BINARY_PATH" ]; then
              # Try app bundle executable with app name
              APP_NAME=$(basename "$APP_PATH" .app)
              BINARY_PATH="$APP_PATH/$APP_NAME"
            fi
          fi
          
          # If still not found, look for any binary
          if [ -z "$BINARY_PATH" ] || [ ! -f "$BINARY_PATH" ]; then
            BINARY_PATH=$(find Build/Build/Products -type f -perm +111 | grep -v "\.xctest" | head -1)
          fi
          
          echo "Final binary path: $BINARY_PATH"
          
          # Find coverage data
          PROFDATA_PATH=$(find Build/Build/ProfileData -name "Coverage.profdata" -type f)
          echo "Coverage data path: $PROFDATA_PATH"
          
          # Generate report if we have what we need
          if [ -n "$BINARY_PATH" ] && [ -n "$PROFDATA_PATH" ] && [ -f "$BINARY_PATH" ] && [ -f "$PROFDATA_PATH" ]; then
            xcrun llvm-cov export \
              -format="lcov" \
              -instr-profile "$PROFDATA_PATH" \
              "$BINARY_PATH" > info.lcov
            echo "Coverage report generated successfully"
          else
            echo "Could not generate coverage report - missing files"
            exit 0  # Don't fail the workflow, just skip coverage
          fi

      - name: Upload to Codecov
        uses: codecov/codecov-action@v5
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./info.lcov
          slug: ultralytics/yolo-ios-app
          fail_ci_if_error: false

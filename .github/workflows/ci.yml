# Ultralytics ðŸš€ AGPL-3.0 License - https://ultralytics.com/license

# Continuous Integration (CI) GitHub Actions tests

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Xcode Version
        run: xcodebuild -version

      - name: Download and unzip YOLO models to tests directory
        run: |
          # First, clean up any existing model files to prevent duplicates
          rm -rf Tests/YOLOTests/Resources/*.mlpackage
          rm -rf Tests/YOLOTests/Resources/__MACOSX
          
          # Create tests directory
          mkdir -p Tests/YOLOTests/Resources
          
          # Download and extract all models
          for MODEL in yolo11n yolo11n-cls yolo11n-obb yolo11n-pose yolo11n-seg; do
            echo "Processing $MODEL..."
            curl -L "https://github.com/ultralytics/yolo-ios-app/releases/download/v8.3.0/${MODEL}.mlpackage.zip" -o temp.zip
            unzip -o temp.zip -d Tests/YOLOTests/Resources
            rm temp.zip
          done
          
          # Clean up macOS metadata folders
          rm -rf Tests/YOLOTests/Resources/__MACOSX
          
          # Verify contents
          ls -la Tests/YOLOTests/Resources

      - name: Install dependencies
        run: |
          xcodebuild -resolvePackageDependencies

      - name: Create test .env file
        run: |
          echo "# Test environment variables" > .env
          echo "API_URL=https://test-api.ultralytics.com" >> .env
          echo "FIREBASE_API_KEY=test-key" >> .env

      - name: Build and Test
        run: |
          # Find available simulators
          xcrun simctl list devices available
          
          # Find a suitable iOS simulator
          IOS_SIMULATOR=$(xcrun simctl list devices available | grep -E "iPhone.*" | head -1 | sed -E 's/.*\(([A-Z0-9-]+)\).*/\1/')
          
          if [ -n "$IOS_SIMULATOR" ]; then
            DESTINATION="id=$IOS_SIMULATOR"
          else
            DESTINATION="name=iPhone 14"
          fi
          
          echo "Using iOS Simulator with $DESTINATION"
          
          # Run the build and test with code coverage enabled
          xcodebuild \
            -scheme YOLO \
            -sdk iphonesimulator \
            -derivedDataPath Build/ \
            -destination "platform=iOS Simulator,$DESTINATION" \
            -enableCodeCoverage YES \
            clean build test
          
          # Extract and convert coverage data
          cd Build/Build/ProfileData
          cd $(ls -d */|head -n 1)
          directory=${PWD##*/}
          pathCoverage=Build/Build/ProfileData/${directory}/Coverage.profdata
          cd ../../../../
          
          # Generate lcov format coverage report
          xcrun llvm-cov export \
            -format="lcov" \
            -instr-profile $pathCoverage \
            Build/Build/Products/Debug-iphonesimulator/YOLO.app/YOLO > info.lcov

      - name: Upload to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./info.lcov
          slug: ultralytics/yolo-ios-app
          fail_ci_if_error: false

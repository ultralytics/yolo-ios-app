# Ultralytics ðŸš€ AGPL-3.0 License - https://ultralytics.com/license

name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  test:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4

      - name: Xcode Version
        run: xcodebuild -version

      - name: Download YOLO models
        run: |
          rm -rf Tests/YOLOTests/Resources/*.mlpackage Tests/YOLOTests/Resources/__MACOSX
          mkdir -p Tests/YOLOTests/Resources
          for MODEL in yolo11n yolo11n-cls yolo11n-obb yolo11n-pose yolo11n-seg; do
            curl -L "https://github.com/ultralytics/yolo-ios-app/releases/download/v8.3.0/${MODEL}.mlpackage.zip" -o temp.zip
            unzip -o temp.zip -d Tests/YOLOTests/Resources && rm temp.zip
          done
          rm -rf Tests/YOLOTests/Resources/__MACOSX

      - name: Install dependencies
        run: xcodebuild -resolvePackageDependencies

      - name: Create test .env file
        run: |
          echo "API_URL=https://test-api.ultralytics.com
          FIREBASE_API_KEY=test-key" > .env

      - name: Build and Test
        run: |
          IOS_SIMULATOR=$(xcrun simctl list devices available | grep -E "iPhone.*" | head -1 | sed -E 's/.*\(([A-Z0-9-]+)\).*/\1/')
          DESTINATION=${IOS_SIMULATOR:+id=$IOS_SIMULATOR}
          DESTINATION=${DESTINATION:-name=iPhone 14}
          
          xcodebuild \
            -scheme YOLO \
            -sdk iphonesimulator \
            -derivedDataPath Build/ \
            -destination "platform=iOS Simulator,$DESTINATION" \
            -enableCodeCoverage YES \
            clean build test

      - name: Generate Code Coverage Report
        run: |
          echo "Listing Build/Build/Products/Debug-iphonesimulator contents:"
          ls -la Build/Build/Products/Debug-iphonesimulator

          PROFDATA_PATH=$(find Build/Build/ProfileData -name "Coverage.profdata" -type f | head -1)
          echo "Coverage data path: $PROFDATA_PATH"

          BINARY_PATH=""
          # Try to find the XCTest bundle executable first
          # This is typical for library/framework coverage where tests exercise the library code
          # Using -print -quit for find is not portable; head -1 is better.
          XCTEST_BUNDLE_PATH=$(find Build/Build/Products -path "*Debug-iphonesimulator/*.xctest" -type d | head -1)
          
          if [ -n "$XCTEST_BUNDLE_PATH" ]; then
            TEST_BUNDLE_NAME=$(basename "$XCTEST_BUNDLE_PATH" .xctest)
            CANDIDATE_PATH="$XCTEST_BUNDLE_PATH/$TEST_BUNDLE_NAME"
            if [ -f "$CANDIDATE_PATH" ]; then
              BINARY_PATH="$CANDIDATE_PATH"
              echo "Identified XCTest executable for coverage: $BINARY_PATH"
            else
              echo "XCTest bundle found at $XCTEST_BUNDLE_PATH, but executable '$TEST_BUNDLE_NAME' not found inside."
            fi
          else
            echo "No .xctest bundle found. Looking for an .app bundle."
            # Fallback: Try to find an .app bundle executable (if it's an application project)
            APP_BUNDLE_PATH=$(find Build/Build/Products -path "*Debug-iphonesimulator/*.app" -not -path "*.xctest/*" -type d | head -1)
            if [ -n "$APP_BUNDLE_PATH" ]; then
              APP_NAME=$(basename "$APP_BUNDLE_PATH" .app)
              # Try executable with the same name as the .app bundle
              CANDIDATE_APP_PATH_DERIVED="$APP_BUNDLE_PATH/$APP_NAME"
              # Try executable with the scheme name "YOLO"
              CANDIDATE_APP_PATH_YOLO="$APP_BUNDLE_PATH/YOLO"

              if [ -f "$CANDIDATE_APP_PATH_DERIVED" ]; then
                BINARY_PATH="$CANDIDATE_APP_PATH_DERIVED"
                echo "Identified .app executable (derived name) for coverage: $BINARY_PATH"
              elif [ -f "$CANDIDATE_APP_PATH_YOLO" ]; then # Fallback if app executable name matches scheme
                BINARY_PATH="$CANDIDATE_APP_PATH_YOLO"
                echo "Identified .app executable (YOLO name) for coverage: $BINARY_PATH"
              else
                echo "App bundle found at $APP_BUNDLE_PATH, but executable '$APP_NAME' or 'YOLO' not found inside."
              fi
            else
                echo "Neither .xctest nor .app bundle executable found in Build/Build/Products/Debug-iphonesimulator."
            fi
          fi

          echo "Final binary path selected for coverage: $BINARY_PATH"
          
          # Check if files exist before attempting to generate report
          BINARY_EXISTS=false
          if [ -n "$BINARY_PATH" ] && [ -f "$BINARY_PATH" ]; then
            BINARY_EXISTS=true
          fi

          PROFDATA_EXISTS=false
          if [ -n "$PROFDATA_PATH" ] && [ -f "$PROFDATA_PATH" ]; then
            PROFDATA_EXISTS=true
          fi

          if $BINARY_EXISTS && $PROFDATA_EXISTS; then
            echo "Generating lcov report with:"
            echo "Binary: $BINARY_PATH"
            echo "Profile Data: $PROFDATA_PATH"
            xcrun llvm-cov export \
              -format="lcov" \
              -instr-profile "$PROFDATA_PATH" \
              "$BINARY_PATH" > info.lcov
            
            if [ -s info.lcov ]; then # Check if file exists and is not empty
                echo "Coverage report generated successfully: info.lcov"
                ls -l info.lcov
            else
                echo "WARNING: info.lcov was generated but is empty. This might indicate an issue with coverage data or binary matching."
                # Ensure info.lcov exists, even if empty, for the Codecov step
                touch info.lcov 
            fi
          else
            echo "Could not generate coverage report - required files (binary or profdata) are missing or invalid."
            echo "Binary Path: $BINARY_PATH (Exists: $BINARY_EXISTS)"
            echo "Profdata Path: $PROFDATA_PATH (Exists: $PROFDATA_EXISTS)"
            # Create an empty info.lcov file so the Codecov action doesn't fail on "file not found"
            # (since fail_ci_if_error is false, an empty report will lead to 0% coverage on Codecov).
            touch info.lcov 
            echo "Empty info.lcov created as a fallback."
          fi

      - name: Upload to Codecov
        uses: codecov/codecov-action@v5
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./info.lcov
          slug: ultralytics/yolo-ios-app
          fail_ci_if_error: false
